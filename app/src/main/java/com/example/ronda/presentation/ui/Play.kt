package com.example.ronda.presentation.ui

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.ronda.domain.rondaGame.Difficulty
import com.example.ronda.domain.rondaGame.GameState
import com.example.ronda.presentation.RondaViewModel
import com.example.ronda.presentation.RondaViewModelFactory

@Composable
fun PlayRonda(modifier: Modifier = Modifier,
         diff: Difficulty
) {
    Column(modifier = Modifier
        .fillMaxSize(),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center)
    {
        val context = LocalContext.current.applicationContext
        val rondaViewModel: RondaViewModel = viewModel(
            factory = RondaViewModelFactory(context)
        )
        //val cards by rondaViewModel.cards.collectAsStateWithLifecycle()
        val rondaState by rondaViewModel.rondaState.collectAsStateWithLifecycle()
        val scores by rondaViewModel.scores.collectAsStateWithLifecycle()
        val playerFlags by rondaViewModel.playerFlags.collectAsStateWithLifecycle()
        //val cardsImages by rondaViewModel.cardsImages.collectAsStateWithLifecycle()
        //val areCardsGenerated by rondaViewModel.areCardsGeneratedFromGame.collectAsStateWithLifecycle()
        var launched by rememberSaveable {mutableStateOf(false)}
        LaunchedEffect(Unit) {
            rondaViewModel.startGameIfNecessary()
        }

        when(rondaState.gameState) {
            GameState.Ready -> Unit
            GameState.Play -> {

                Ronda(
                    modifier = modifier,
                    rondaViewModel
                )
            }
            GameState.Draw -> Unit
            GameState.Win -> Unit
            GameState.Lose -> Unit
        }
    }

}